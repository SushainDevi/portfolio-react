{
  "version": 3,
  "sources": ["../../@remix-run/router/history.ts", "../../@remix-run/router/utils.ts", "../../@remix-run/router/router.ts", "../../@remix-run/server-runtime/dist/esm/mode.js", "../../@remix-run/server-runtime/dist/esm/errors.js", "../../@remix-run/server-runtime/dist/esm/responses.js", "../../cookie/index.js", "../../@remix-run/server-runtime/dist/esm/warnings.js", "../../@remix-run/server-runtime/dist/esm/cookies.js", "../../@web3-storage/multipart-parser/esm/src/utils.js", "../../@web3-storage/multipart-parser/esm/src/search.js", "../../@web3-storage/multipart-parser/esm/src/index.js", "../../@remix-run/server-runtime/dist/esm/formData.js", "../../@remix-run/server-runtime/dist/esm/entry.js", "../../set-cookie-parser/lib/set-cookie.js", "../../@remix-run/server-runtime/dist/esm/headers.js", "../../@remix-run/server-runtime/dist/esm/invariant.js", "../../@remix-run/server-runtime/dist/esm/routeMatching.js", "../../@remix-run/server-runtime/dist/esm/data.js", "../../@remix-run/server-runtime/dist/esm/routes.js", "../../@remix-run/server-runtime/dist/esm/markup.js", "../../@remix-run/server-runtime/dist/esm/serverHandoff.js", "../../@remix-run/server-runtime/dist/esm/dev.js", "../../@remix-run/server-runtime/dist/esm/server.js", "../../@remix-run/server-runtime/dist/esm/sessions.js", "../../@remix-run/server-runtime/dist/esm/sessions/cookieStorage.js", "../../@remix-run/server-runtime/dist/esm/sessions/memoryStorage.js", "../../@remix-run/server-runtime/dist/esm/upload/errors.js", "../../@remix-run/server-runtime/dist/esm/upload/memoryUploadHandler.js", "../../@remix-run/server-runtime/dist/esm/index.js"],
  "sourcesContent": ["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n", "import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n  reloadDocument?: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (args: LoaderFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (args: ActionFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], decoded);\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nfunction decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === matches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n", "import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  ActionFunction,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  AgnosticRouteObject,\n  DataResult,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  ImmutableRouteKey,\n  LoaderFunction,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized: boolean;\n  let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);\n  let hasLoaders = initialMatches.some((m) => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    initialized = initialMatches.every(\n      (m) =>\n        m.route.loader &&\n        m.route.loader.hydrate !== true &&\n        ((loaderData && loaderData[m.route.id] !== undefined) ||\n          (errors && errors[m.route.id] !== undefined))\n    );\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        future.v7_relativeSplatPath\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors: pendingError || null,\n          ...(pendingActionData ? { actionData: pendingActionData } : {}),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since iot's not a \"navigation\"\n    if (\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration)\n    ) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(\n        {\n          navigation: loadingNavigation,\n          ...(actionData\n            ? Object.keys(actionData).length === 0\n              ? { actionData: null }\n              : { actionData }\n            : {}),\n          ...(revalidatingFetchers.length > 0\n            ? { fetchers: new Map(state.fetchers) }\n            : {}),\n        },\n        {\n          flushSync,\n        }\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename,\n      future.v7_relativeSplatPath\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(state, actionResult, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename,\n      future.v7_relativeSplatPath\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true,\n    });\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          future.v7_relativeSplatPath\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        future.v7_relativeSplatPath,\n        { isStaticRequest: true, isRouteRequest, requestContext }\n      );\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          future.v7_relativeSplatPath,\n          { isStaticRequest: true, isRouteRequest, requestContext }\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  v7_relativeSplatPath: boolean,\n  opts: {\n    isStaticRequest?: boolean;\n    isRouteRequest?: boolean;\n    requestContext?: unknown;\n  } = {}\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({\n        request,\n        params: match.params,\n        context: opts.requestContext,\n      }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location,\n          v7_relativeSplatPath\n        );\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse: QueryRouteResponse = {\n        type:\n          resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result,\n      };\n      throw queryRouteResponse;\n    }\n\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || obj.type === ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n\n//#endregion\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\n/**\r\n * The mode to use when running the server.\r\n */\r\nlet ServerMode = /*#__PURE__*/function (ServerMode) {\r\n  ServerMode[\"Development\"] = \"development\";\r\n  ServerMode[\"Production\"] = \"production\";\r\n  ServerMode[\"Test\"] = \"test\";\r\n  return ServerMode;\r\n}({});\r\nfunction isServerMode(value) {\r\n  return value === ServerMode.Development || value === ServerMode.Production || value === ServerMode.Test;\r\n}\r\n\r\nexport { ServerMode, isServerMode };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport { isRouteErrorResponse } from '@remix-run/router';\r\nimport { ServerMode } from './mode.js';\r\n\r\n/**\r\n * This thing probably warrants some explanation.\r\n *\r\n * The whole point here is to emulate componentDidCatch for server rendering and\r\n * data loading. It can get tricky. React can do this on component boundaries\r\n * but doesn't support it for server rendering or data loading. We know enough\r\n * with nested routes to be able to emulate the behavior (because we know them\r\n * statically before rendering.)\r\n *\r\n * Each route can export an `ErrorBoundary`.\r\n *\r\n * - When rendering throws an error, the nearest error boundary will render\r\n *   (normal react componentDidCatch). This will be the route's own boundary, but\r\n *   if none is provided, it will bubble up to the parents.\r\n * - When data loading throws an error, the nearest error boundary will render\r\n * - When performing an action, the nearest error boundary for the action's\r\n *   route tree will render (no redirect happens)\r\n *\r\n * During normal react rendering, we do nothing special, just normal\r\n * componentDidCatch.\r\n *\r\n * For server rendering, we mutate `renderBoundaryRouteId` to know the last\r\n * layout that has an error boundary that tried to render. This emulates which\r\n * layout would catch a thrown error. If the rendering fails, we catch the error\r\n * on the server, and go again a second time with the emulator holding on to the\r\n * information it needs to render the same error boundary as a dynamically\r\n * thrown render error.\r\n *\r\n * When data loading, server or client side, we use the emulator to likewise\r\n * hang on to the error and re-render at the appropriate layout (where a thrown\r\n * error would have been caught by cDC).\r\n *\r\n * When actions throw, it all works the same. There's an edge case to be aware\r\n * of though. Actions normally are required to redirect, but in the case of\r\n * errors, we render the action's route with the emulator holding on to the\r\n * error. If during this render a parent route/loader throws we ignore that new\r\n * error and render the action's original error as deeply as possible. In other\r\n * words, we simply ignore the new error and use the action's error in place\r\n * because it came first, and that just wouldn't be fair to let errors cut in\r\n * line.\r\n */\r\n\r\nfunction sanitizeError(error, serverMode) {\r\n  if (error instanceof Error && serverMode !== ServerMode.Development) {\r\n    let sanitized = new Error(\"Unexpected Server Error\");\r\n    sanitized.stack = undefined;\r\n    return sanitized;\r\n  }\r\n  return error;\r\n}\r\nfunction sanitizeErrors(errors, serverMode) {\r\n  return Object.entries(errors).reduce((acc, [routeId, error]) => {\r\n    return Object.assign(acc, {\r\n      [routeId]: sanitizeError(error, serverMode)\r\n    });\r\n  }, {});\r\n}\r\n\r\n// must be type alias due to inference issues on interfaces\r\n// https://github.com/microsoft/TypeScript/issues/15300\r\n\r\nfunction serializeError(error, serverMode) {\r\n  let sanitized = sanitizeError(error, serverMode);\r\n  return {\r\n    message: sanitized.message,\r\n    stack: sanitized.stack\r\n  };\r\n}\r\nfunction serializeErrors(errors, serverMode) {\r\n  if (!errors) return null;\r\n  let entries = Object.entries(errors);\r\n  let serialized = {};\r\n  for (let [key, val] of entries) {\r\n    // Hey you!  If you change this, please change the corresponding logic in\r\n    // deserializeErrors in remix-react/errors.ts :)\r\n    if (isRouteErrorResponse(val)) {\r\n      serialized[key] = {\r\n        ...val,\r\n        __type: \"RouteErrorResponse\"\r\n      };\r\n    } else if (val instanceof Error) {\r\n      let sanitized = sanitizeError(val, serverMode);\r\n      serialized[key] = {\r\n        message: sanitized.message,\r\n        stack: sanitized.stack,\r\n        __type: \"Error\",\r\n        // If this is a subclass (i.e., ReferenceError), send up the type so we\r\n        // can re-create the same type during hydration.  This will only apply\r\n        // in dev mode since all production errors are sanitized to normal\r\n        // Error instances\r\n        ...(sanitized.name !== \"Error\" ? {\r\n          __subType: sanitized.name\r\n        } : {})\r\n      };\r\n    } else {\r\n      serialized[key] = val;\r\n    }\r\n  }\r\n  return serialized;\r\n}\r\n\r\nexport { sanitizeError, sanitizeErrors, serializeError, serializeErrors };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport { json as json$1, defer as defer$1, redirect as redirect$1, redirectDocument as redirectDocument$1 } from '@remix-run/router';\r\nimport { serializeError } from './errors.js';\r\n\r\n// must be a type since this is a subtype of response\r\n// interfaces must conform to the types they extend\r\n\r\n/**\r\n * This is a shortcut for creating `application/json` responses. Converts `data`\r\n * to JSON and sets the `Content-Type` header.\r\n *\r\n * @see https://remix.run/utils/json\r\n */\r\nconst json = (data, init = {}) => {\r\n  return json$1(data, init);\r\n};\r\n\r\n/**\r\n * This is a shortcut for creating Remix deferred responses\r\n *\r\n * @see https://remix.run/utils/defer\r\n */\r\nconst defer = (data, init = {}) => {\r\n  return defer$1(data, init);\r\n};\r\n/**\r\n * A redirect response. Sets the status code and the `Location` header.\r\n * Defaults to \"302 Found\".\r\n *\r\n * @see https://remix.run/utils/redirect\r\n */\r\nconst redirect = (url, init = 302) => {\r\n  return redirect$1(url, init);\r\n};\r\n\r\n/**\r\n * A redirect response that will force a document reload to the new location.\r\n * Sets the status code and the `Location` header.\r\n * Defaults to \"302 Found\".\r\n *\r\n * @see https://remix.run/utils/redirect\r\n */\r\nconst redirectDocument = (url, init = 302) => {\r\n  return redirectDocument$1(url, init);\r\n};\r\nfunction isDeferredData(value) {\r\n  let deferred = value;\r\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\r\n}\r\nfunction isResponse(value) {\r\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\r\n}\r\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\r\nfunction isRedirectStatusCode(statusCode) {\r\n  return redirectStatusCodes.has(statusCode);\r\n}\r\nfunction isRedirectResponse(response) {\r\n  return isRedirectStatusCode(response.status);\r\n}\r\nfunction isTrackedPromise(value) {\r\n  return value != null && typeof value.then === \"function\" && value._tracked === true;\r\n}\r\n\r\n// TODO: Figure out why ReadableStream types are borked sooooooo badly\r\n// in this file. Probably related to our TS configurations and configs\r\n// bleeding into each other.\r\nconst DEFERRED_VALUE_PLACEHOLDER_PREFIX = \"__deferred_promise:\";\r\nfunction createDeferredReadableStream(deferredData, signal, serverMode) {\r\n  let encoder = new TextEncoder();\r\n  let stream = new ReadableStream({\r\n    async start(controller) {\r\n      let criticalData = {};\r\n      let preresolvedKeys = [];\r\n      for (let [key, value] of Object.entries(deferredData.data)) {\r\n        if (isTrackedPromise(value)) {\r\n          criticalData[key] = `${DEFERRED_VALUE_PLACEHOLDER_PREFIX}${key}`;\r\n          if (typeof value._data !== \"undefined\" || typeof value._error !== \"undefined\") {\r\n            preresolvedKeys.push(key);\r\n          }\r\n        } else {\r\n          criticalData[key] = value;\r\n        }\r\n      }\r\n\r\n      // Send the critical data\r\n      controller.enqueue(encoder.encode(JSON.stringify(criticalData) + \"\\n\\n\"));\r\n      for (let preresolvedKey of preresolvedKeys) {\r\n        enqueueTrackedPromise(controller, encoder, preresolvedKey, deferredData.data[preresolvedKey], serverMode);\r\n      }\r\n      let unsubscribe = deferredData.subscribe((aborted, settledKey) => {\r\n        if (settledKey) {\r\n          enqueueTrackedPromise(controller, encoder, settledKey, deferredData.data[settledKey], serverMode);\r\n        }\r\n      });\r\n      await deferredData.resolveData(signal);\r\n      unsubscribe();\r\n      controller.close();\r\n    }\r\n  });\r\n  return stream;\r\n}\r\nfunction enqueueTrackedPromise(controller, encoder, settledKey, promise, serverMode) {\r\n  if (\"_error\" in promise) {\r\n    controller.enqueue(encoder.encode(\"error:\" + JSON.stringify({\r\n      [settledKey]: promise._error instanceof Error ? serializeError(promise._error, serverMode) : promise._error\r\n    }) + \"\\n\\n\"));\r\n  } else {\r\n    controller.enqueue(encoder.encode(\"data:\" + JSON.stringify({\r\n      [settledKey]: promise._data ?? null\r\n    }) + \"\\n\\n\"));\r\n  }\r\n}\r\n\r\nexport { createDeferredReadableStream, defer, isDeferredData, isRedirectResponse, isRedirectStatusCode, isResponse, json, redirect, redirectDocument };\r\n", "/*!\r\n * cookie\r\n * Copyright(c) 2012-2014 Roman Shtylman\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nexports.parse = parse;\r\nexports.serialize = serialize;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar __toString = Object.prototype.toString\r\n\r\n/**\r\n * RegExp to match field-content in RFC 7230 sec 3.2\r\n *\r\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n * field-vchar   = VCHAR / obs-text\r\n * obs-text      = %x80-FF\r\n */\r\n\r\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\r\n\r\n/**\r\n * Parse a cookie header.\r\n *\r\n * Parse the given cookie header string into an object\r\n * The object has the various cookies as keys(names) => values\r\n *\r\n * @param {string} str\r\n * @param {object} [options]\r\n * @return {object}\r\n * @public\r\n */\r\n\r\nfunction parse(str, options) {\r\n  if (typeof str !== 'string') {\r\n    throw new TypeError('argument str must be a string');\r\n  }\r\n\r\n  var obj = {}\r\n  var opt = options || {};\r\n  var dec = opt.decode || decode;\r\n\r\n  var index = 0\r\n  while (index < str.length) {\r\n    var eqIdx = str.indexOf('=', index)\r\n\r\n    // no more cookie pairs\r\n    if (eqIdx === -1) {\r\n      break\r\n    }\r\n\r\n    var endIdx = str.indexOf(';', index)\r\n\r\n    if (endIdx === -1) {\r\n      endIdx = str.length\r\n    } else if (endIdx < eqIdx) {\r\n      // backtrack on prior semicolon\r\n      index = str.lastIndexOf(';', eqIdx - 1) + 1\r\n      continue\r\n    }\r\n\r\n    var key = str.slice(index, eqIdx).trim()\r\n\r\n    // only assign once\r\n    if (undefined === obj[key]) {\r\n      var val = str.slice(eqIdx + 1, endIdx).trim()\r\n\r\n      // quoted values\r\n      if (val.charCodeAt(0) === 0x22) {\r\n        val = val.slice(1, -1)\r\n      }\r\n\r\n      obj[key] = tryDecode(val, dec);\r\n    }\r\n\r\n    index = endIdx + 1\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Serialize data into a cookie header.\r\n *\r\n * Serialize the a name value pair into a cookie string suitable for\r\n * http headers. An optional options object specified cookie parameters.\r\n *\r\n * serialize('foo', 'bar', { httpOnly: true })\r\n *   => \"foo=bar; httpOnly\"\r\n *\r\n * @param {string} name\r\n * @param {string} val\r\n * @param {object} [options]\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction serialize(name, val, options) {\r\n  var opt = options || {};\r\n  var enc = opt.encode || encode;\r\n\r\n  if (typeof enc !== 'function') {\r\n    throw new TypeError('option encode is invalid');\r\n  }\r\n\r\n  if (!fieldContentRegExp.test(name)) {\r\n    throw new TypeError('argument name is invalid');\r\n  }\r\n\r\n  var value = enc(val);\r\n\r\n  if (value && !fieldContentRegExp.test(value)) {\r\n    throw new TypeError('argument val is invalid');\r\n  }\r\n\r\n  var str = name + '=' + value;\r\n\r\n  if (null != opt.maxAge) {\r\n    var maxAge = opt.maxAge - 0;\r\n\r\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\r\n      throw new TypeError('option maxAge is invalid')\r\n    }\r\n\r\n    str += '; Max-Age=' + Math.floor(maxAge);\r\n  }\r\n\r\n  if (opt.domain) {\r\n    if (!fieldContentRegExp.test(opt.domain)) {\r\n      throw new TypeError('option domain is invalid');\r\n    }\r\n\r\n    str += '; Domain=' + opt.domain;\r\n  }\r\n\r\n  if (opt.path) {\r\n    if (!fieldContentRegExp.test(opt.path)) {\r\n      throw new TypeError('option path is invalid');\r\n    }\r\n\r\n    str += '; Path=' + opt.path;\r\n  }\r\n\r\n  if (opt.expires) {\r\n    var expires = opt.expires\r\n\r\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\r\n      throw new TypeError('option expires is invalid');\r\n    }\r\n\r\n    str += '; Expires=' + expires.toUTCString()\r\n  }\r\n\r\n  if (opt.httpOnly) {\r\n    str += '; HttpOnly';\r\n  }\r\n\r\n  if (opt.secure) {\r\n    str += '; Secure';\r\n  }\r\n\r\n  if (opt.partitioned) {\r\n    str += '; Partitioned'\r\n  }\r\n\r\n  if (opt.priority) {\r\n    var priority = typeof opt.priority === 'string'\r\n      ? opt.priority.toLowerCase()\r\n      : opt.priority\r\n\r\n    switch (priority) {\r\n      case 'low':\r\n        str += '; Priority=Low'\r\n        break\r\n      case 'medium':\r\n        str += '; Priority=Medium'\r\n        break\r\n      case 'high':\r\n        str += '; Priority=High'\r\n        break\r\n      default:\r\n        throw new TypeError('option priority is invalid')\r\n    }\r\n  }\r\n\r\n  if (opt.sameSite) {\r\n    var sameSite = typeof opt.sameSite === 'string'\r\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\r\n\r\n    switch (sameSite) {\r\n      case true:\r\n        str += '; SameSite=Strict';\r\n        break;\r\n      case 'lax':\r\n        str += '; SameSite=Lax';\r\n        break;\r\n      case 'strict':\r\n        str += '; SameSite=Strict';\r\n        break;\r\n      case 'none':\r\n        str += '; SameSite=None';\r\n        break;\r\n      default:\r\n        throw new TypeError('option sameSite is invalid');\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n/**\r\n * URL-decode string value. Optimized to skip native call when no %.\r\n *\r\n * @param {string} str\r\n * @returns {string}\r\n */\r\n\r\nfunction decode (str) {\r\n  return str.indexOf('%') !== -1\r\n    ? decodeURIComponent(str)\r\n    : str\r\n}\r\n\r\n/**\r\n * URL-encode value.\r\n *\r\n * @param {string} val\r\n * @returns {string}\r\n */\r\n\r\nfunction encode (val) {\r\n  return encodeURIComponent(val)\r\n}\r\n\r\n/**\r\n * Determine if value is a Date.\r\n *\r\n * @param {*} val\r\n * @private\r\n */\r\n\r\nfunction isDate (val) {\r\n  return __toString.call(val) === '[object Date]' ||\r\n    val instanceof Date\r\n}\r\n\r\n/**\r\n * Try decoding a string using a decoding function.\r\n *\r\n * @param {string} str\r\n * @param {function} decode\r\n * @private\r\n */\r\n\r\nfunction tryDecode(str, decode) {\r\n  try {\r\n    return decode(str);\r\n  } catch (e) {\r\n    return str;\r\n  }\r\n}\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nconst alreadyWarned = {};\r\nfunction warnOnce(condition, message) {\r\n  if (!condition && !alreadyWarned[message]) {\r\n    alreadyWarned[message] = true;\r\n    console.warn(message);\r\n  }\r\n}\r\n\r\nexport { warnOnce };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport { parse, serialize } from 'cookie';\r\nimport { warnOnce } from './warnings.js';\r\n\r\n/**\r\n * A HTTP cookie.\r\n *\r\n * A Cookie is a logical container for metadata about a HTTP cookie; its name\r\n * and options. But it doesn't contain a value. Instead, it has `parse()` and\r\n * `serialize()` methods that allow a single instance to be reused for\r\n * parsing/encoding multiple different values.\r\n *\r\n * @see https://remix.run/utils/cookies#cookie-api\r\n */\r\n\r\n/**\r\n * Creates a logical container for managing a browser cookie from the server.\r\n *\r\n * @see https://remix.run/utils/cookies#createcookie\r\n */\r\nconst createCookieFactory = ({\r\n  sign,\r\n  unsign\r\n}) => (name, cookieOptions = {}) => {\r\n  let {\r\n    secrets = [],\r\n    ...options\r\n  } = {\r\n    path: \"/\",\r\n    sameSite: \"lax\",\r\n    ...cookieOptions\r\n  };\r\n  warnOnceAboutExpiresCookie(name, options.expires);\r\n  return {\r\n    get name() {\r\n      return name;\r\n    },\r\n    get isSigned() {\r\n      return secrets.length > 0;\r\n    },\r\n    get expires() {\r\n      // Max-Age takes precedence over Expires\r\n      return typeof options.maxAge !== \"undefined\" ? new Date(Date.now() + options.maxAge * 1000) : options.expires;\r\n    },\r\n    async parse(cookieHeader, parseOptions) {\r\n      if (!cookieHeader) return null;\r\n      let cookies = parse(cookieHeader, {\r\n        ...options,\r\n        ...parseOptions\r\n      });\r\n      return name in cookies ? cookies[name] === \"\" ? \"\" : await decodeCookieValue(unsign, cookies[name], secrets) : null;\r\n    },\r\n    async serialize(value, serializeOptions) {\r\n      return serialize(name, value === \"\" ? \"\" : await encodeCookieValue(sign, value, secrets), {\r\n        ...options,\r\n        ...serializeOptions\r\n      });\r\n    }\r\n  };\r\n};\r\n/**\r\n * Returns true if an object is a Remix cookie container.\r\n *\r\n * @see https://remix.run/utils/cookies#iscookie\r\n */\r\nconst isCookie = object => {\r\n  return object != null && typeof object.name === \"string\" && typeof object.isSigned === \"boolean\" && typeof object.parse === \"function\" && typeof object.serialize === \"function\";\r\n};\r\nasync function encodeCookieValue(sign, value, secrets) {\r\n  let encoded = encodeData(value);\r\n  if (secrets.length > 0) {\r\n    encoded = await sign(encoded, secrets[0]);\r\n  }\r\n  return encoded;\r\n}\r\nasync function decodeCookieValue(unsign, value, secrets) {\r\n  if (secrets.length > 0) {\r\n    for (let secret of secrets) {\r\n      let unsignedValue = await unsign(value, secret);\r\n      if (unsignedValue !== false) {\r\n        return decodeData(unsignedValue);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  return decodeData(value);\r\n}\r\nfunction encodeData(value) {\r\n  return btoa(myUnescape(encodeURIComponent(JSON.stringify(value))));\r\n}\r\nfunction decodeData(value) {\r\n  try {\r\n    return JSON.parse(decodeURIComponent(myEscape(atob(value))));\r\n  } catch (error) {\r\n    return {};\r\n  }\r\n}\r\n\r\n// See: https://github.com/zloirock/core-js/blob/master/packages/core-js/modules/es.escape.js\r\nfunction myEscape(value) {\r\n  let str = value.toString();\r\n  let result = \"\";\r\n  let index = 0;\r\n  let chr, code;\r\n  while (index < str.length) {\r\n    chr = str.charAt(index++);\r\n    if (/[\\w*+\\-./@]/.exec(chr)) {\r\n      result += chr;\r\n    } else {\r\n      code = chr.charCodeAt(0);\r\n      if (code < 256) {\r\n        result += \"%\" + hex(code, 2);\r\n      } else {\r\n        result += \"%u\" + hex(code, 4).toUpperCase();\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\nfunction hex(code, length) {\r\n  let result = code.toString(16);\r\n  while (result.length < length) result = \"0\" + result;\r\n  return result;\r\n}\r\n\r\n// See: https://github.com/zloirock/core-js/blob/master/packages/core-js/modules/es.unescape.js\r\nfunction myUnescape(value) {\r\n  let str = value.toString();\r\n  let result = \"\";\r\n  let index = 0;\r\n  let chr, part;\r\n  while (index < str.length) {\r\n    chr = str.charAt(index++);\r\n    if (chr === \"%\") {\r\n      if (str.charAt(index) === \"u\") {\r\n        part = str.slice(index + 1, index + 5);\r\n        if (/^[\\da-f]{4}$/i.exec(part)) {\r\n          result += String.fromCharCode(parseInt(part, 16));\r\n          index += 5;\r\n          continue;\r\n        }\r\n      } else {\r\n        part = str.slice(index, index + 2);\r\n        if (/^[\\da-f]{2}$/i.exec(part)) {\r\n          result += String.fromCharCode(parseInt(part, 16));\r\n          index += 2;\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n    result += chr;\r\n  }\r\n  return result;\r\n}\r\nfunction warnOnceAboutExpiresCookie(name, expires) {\r\n  warnOnce(!expires, `The \"${name}\" cookie has an \"expires\" property set. ` + `This will cause the expires value to not be updated when the session is committed. ` + `Instead, you should set the expires value when serializing the cookie. ` + `You can use \\`commitSession(session, { expires })\\` if using a session storage object, ` + `or \\`cookie.serialize(\"value\", { expires })\\` if you're using the cookie directly.`);\r\n}\r\n\r\nexport { createCookieFactory, isCookie };\r\n", "export function stringToArray(s) {\r\n  const utf8 = unescape(encodeURIComponent(s));\r\n  return Uint8Array.from(utf8, (_, i) => utf8.charCodeAt(i));\r\n}\r\nexport function arrayToString(a) {\r\n  const utf8 = String.fromCharCode.apply(null, a);\r\n  return decodeURIComponent(escape(utf8));\r\n}\r\nexport function mergeArrays(...arrays) {\r\n  const out = new Uint8Array(arrays.reduce((total, arr) => total + arr.length, 0));\r\n  let offset = 0;\r\n  for (const arr of arrays) {\r\n    out.set(arr, offset);\r\n    offset += arr.length;\r\n  }\r\n  return out;\r\n}\r\nexport function arraysEqual(a, b) {\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < a.length; i++) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}", "import {\r\n  stringToArray,\r\n  mergeArrays,\r\n  arrayToString\r\n} from './utils.js';\r\nfunction coerce(a) {\r\n  if (a instanceof Uint8Array) {\r\n    return index => a[index];\r\n  }\r\n  return a;\r\n}\r\nfunction jsmemcmp(buf1, pos1, buf2, pos2, len) {\r\n  const fn1 = coerce(buf1);\r\n  const fn2 = coerce(buf2);\r\n  for (let i = 0; i < len; ++i) {\r\n    if (fn1(pos1 + i) !== fn2(pos2 + i)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nfunction createOccurenceTable(s) {\r\n  const table = new Array(256).fill(s.length);\r\n  if (s.length > 1) {\r\n    for (let i = 0; i < s.length - 1; i++) {\r\n      table[s[i]] = s.length - 1 - i;\r\n    }\r\n  }\r\n  return table;\r\n}\r\nconst MATCH = Symbol('Match');\r\nclass StreamSearch {\r\n  constructor(needle) {\r\n    this._lookbehind = new Uint8Array();\r\n    if (typeof needle === 'string') {\r\n      this._needle = needle = stringToArray(needle);\r\n    } else {\r\n      this._needle = needle;\r\n    }\r\n    this._lastChar = needle[needle.length - 1];\r\n    this._occ = createOccurenceTable(needle);\r\n  }\r\n  feed(chunk) {\r\n    let pos = 0;\r\n    let tokens;\r\n    const allTokens = [];\r\n    while (pos !== chunk.length) {\r\n      ;\r\n      [pos, ...tokens] = this._feed(chunk, pos);\r\n      allTokens.push(...tokens);\r\n    }\r\n    return allTokens;\r\n  }\r\n  end() {\r\n    const tail = this._lookbehind;\r\n    this._lookbehind = new Uint8Array();\r\n    return tail;\r\n  }\r\n  _feed(data, bufPos) {\r\n    const tokens = [];\r\n    let pos = -this._lookbehind.length;\r\n    if (pos < 0) {\r\n      while (pos < 0 && pos <= data.length - this._needle.length) {\r\n        const ch = this._charAt(data, pos + this._needle.length - 1);\r\n        if (ch === this._lastChar && this._memcmp(data, pos, this._needle.length - 1)) {\r\n          if (pos > -this._lookbehind.length) {\r\n            tokens.push(this._lookbehind.slice(0, this._lookbehind.length + pos));\r\n          }\r\n          tokens.push(MATCH);\r\n          this._lookbehind = new Uint8Array();\r\n          return [\r\n            pos + this._needle.length,\r\n            ...tokens\r\n          ];\r\n        } else {\r\n          pos += this._occ[ch];\r\n        }\r\n      }\r\n      if (pos < 0) {\r\n        while (pos < 0 && !this._memcmp(data, pos, data.length - pos)) {\r\n          pos++;\r\n        }\r\n      }\r\n      if (pos >= 0) {\r\n        tokens.push(this._lookbehind);\r\n        this._lookbehind = new Uint8Array();\r\n      } else {\r\n        const bytesToCutOff = this._lookbehind.length + pos;\r\n        if (bytesToCutOff > 0) {\r\n          tokens.push(this._lookbehind.slice(0, bytesToCutOff));\r\n          this._lookbehind = this._lookbehind.slice(bytesToCutOff);\r\n        }\r\n        this._lookbehind = Uint8Array.from(new Array(this._lookbehind.length + data.length), (_, i) => this._charAt(data, i - this._lookbehind.length));\r\n        return [\r\n          data.length,\r\n          ...tokens\r\n        ];\r\n      }\r\n    }\r\n    pos += bufPos;\r\n    while (pos <= data.length - this._needle.length) {\r\n      const ch = data[pos + this._needle.length - 1];\r\n      if (ch === this._lastChar && data[pos] === this._needle[0] && jsmemcmp(this._needle, 0, data, pos, this._needle.length - 1)) {\r\n        if (pos > bufPos) {\r\n          tokens.push(data.slice(bufPos, pos));\r\n        }\r\n        tokens.push(MATCH);\r\n        return [\r\n          pos + this._needle.length,\r\n          ...tokens\r\n        ];\r\n      } else {\r\n        pos += this._occ[ch];\r\n      }\r\n    }\r\n    if (pos < data.length) {\r\n      while (pos < data.length && (data[pos] !== this._needle[0] || !jsmemcmp(data, pos, this._needle, 0, data.length - pos))) {\r\n        ++pos;\r\n      }\r\n      if (pos < data.length) {\r\n        this._lookbehind = data.slice(pos);\r\n      }\r\n    }\r\n    if (pos > 0) {\r\n      tokens.push(data.slice(bufPos, pos < data.length ? pos : data.length));\r\n    }\r\n    return [\r\n      data.length,\r\n      ...tokens\r\n    ];\r\n  }\r\n  _charAt(data, pos) {\r\n    if (pos < 0) {\r\n      return this._lookbehind[this._lookbehind.length + pos];\r\n    }\r\n    return data[pos];\r\n  }\r\n  _memcmp(data, pos, len) {\r\n    return jsmemcmp(this._charAt.bind(this, data), pos, this._needle, 0, len);\r\n  }\r\n}\r\nclass ReadableStreamSearch {\r\n  constructor(needle, _readableStream) {\r\n    this._readableStream = _readableStream;\r\n    this._search = new StreamSearch(needle);\r\n  }\r\n  async *[Symbol.asyncIterator]() {\r\n    const reader = this._readableStream.getReader();\r\n    try {\r\n      while (true) {\r\n        const result = await reader.read();\r\n        if (result.done) {\r\n          break;\r\n        }\r\n        yield* this._search.feed(result.value);\r\n      }\r\n      const tail = this._search.end();\r\n      if (tail.length) {\r\n        yield tail;\r\n      }\r\n    } finally {\r\n      reader.releaseLock();\r\n    }\r\n  }\r\n}\r\nconst EOQ = Symbol('End of Queue');\r\nclass QueueableStreamSearch {\r\n  constructor(needle) {\r\n    this._chunksQueue = [];\r\n    this._closed = false;\r\n    this._search = new StreamSearch(needle);\r\n  }\r\n  push(...chunks) {\r\n    if (this._closed) {\r\n      throw new Error('cannot call push after close');\r\n    }\r\n    this._chunksQueue.push(...chunks);\r\n    if (this._notify) {\r\n      this._notify();\r\n    }\r\n  }\r\n  close() {\r\n    if (this._closed) {\r\n      throw new Error('close was already called');\r\n    }\r\n    this._closed = true;\r\n    this._chunksQueue.push(EOQ);\r\n    if (this._notify) {\r\n      this._notify();\r\n    }\r\n  }\r\n  async *[Symbol.asyncIterator]() {\r\n    while (true) {\r\n      let chunk;\r\n      while (!(chunk = this._chunksQueue.shift())) {\r\n        await new Promise(resolve => this._notify = resolve);\r\n        this._notify = undefined;\r\n      }\r\n      if (chunk === EOQ) {\r\n        break;\r\n      }\r\n      yield* this._search.feed(chunk);\r\n    }\r\n    const tail = this._search.end();\r\n    if (tail.length) {\r\n      yield tail;\r\n    }\r\n  }\r\n}\r\nfunction splitChunks(chunks, needle) {\r\n  const search = new StreamSearch(needle);\r\n  const outchunks = [[]];\r\n  for (const chunk of chunks) {\r\n    for (const token of search.feed(chunk)) {\r\n      if (token === MATCH) {\r\n        outchunks.push([]);\r\n      } else {\r\n        outchunks[outchunks.length - 1].push(token);\r\n      }\r\n    }\r\n  }\r\n  const end = search.end();\r\n  outchunks[outchunks.length - 1].push(end);\r\n  return outchunks.map(chunks => mergeArrays(...chunks));\r\n}\r\nfunction split(buf, needle) {\r\n  return splitChunks([buf], needle);\r\n}\r\nasync function* chunksIterator(iter) {\r\n  let chunks = [];\r\n  for await (const value of iter) {\r\n    if (value === MATCH) {\r\n      yield chunks;\r\n      chunks = [];\r\n    } else {\r\n      chunks.push(value);\r\n    }\r\n  }\r\n  yield chunks;\r\n}\r\nasync function* stringIterator(iter) {\r\n  for await (const chunk of chunksIterator(iter)) {\r\n    yield chunk.map(arrayToString).join('');\r\n  }\r\n}\r\nasync function allStrings(iter) {\r\n  const segments = [];\r\n  for await (const value of stringIterator(iter)) {\r\n    segments.push(value);\r\n  }\r\n  return segments;\r\n}\r\nasync function* arrayIterator(iter) {\r\n  for await (const chunk of chunksIterator(iter)) {\r\n    yield mergeArrays(...chunk);\r\n  }\r\n}\r\nexport {\r\n  MATCH,\r\n  QueueableStreamSearch,\r\n  ReadableStreamSearch,\r\n  StreamSearch,\r\n  allStrings,\r\n  arrayIterator,\r\n  chunksIterator,\r\n  split,\r\n  splitChunks,\r\n  stringIterator\r\n};", "import {\r\n  ReadableStreamSearch,\r\n  StreamSearch,\r\n  MATCH\r\n} from './search.js';\r\nimport {\r\n  arraysEqual,\r\n  stringToArray,\r\n  arrayToString,\r\n  mergeArrays\r\n} from './utils.js';\r\nconst mergeArrays2 = Function.prototype.apply.bind(mergeArrays, undefined);\r\nconst dash = stringToArray('--');\r\nconst CRLF = stringToArray('\\r\\n');\r\nfunction parseContentDisposition(header) {\r\n  const parts = header.split(';').map(part => part.trim());\r\n  if (parts.shift() !== 'form-data') {\r\n    throw new Error('malformed content-disposition header: missing \"form-data\" in `' + JSON.stringify(parts) + '`');\r\n  }\r\n  const out = {};\r\n  for (const part of parts) {\r\n    const kv = part.split('=', 2);\r\n    if (kv.length !== 2) {\r\n      throw new Error('malformed content-disposition header: key-value pair not found - ' + part + ' in `' + header + '`');\r\n    }\r\n    const [name, value] = kv;\r\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\r\n      out[name] = value.slice(1, -1).replace(/\\\\\"/g, '\"');\r\n    } else if (value[0] !== '\"' && value[value.length - 1] !== '\"') {\r\n      out[name] = value;\r\n    } else if (value[0] === '\"' && value[value.length - 1] !== '\"' || value[0] !== '\"' && value[value.length - 1] === '\"') {\r\n      throw new Error('malformed content-disposition header: mismatched quotations in `' + header + '`');\r\n    }\r\n  }\r\n  if (!out.name) {\r\n    throw new Error('malformed content-disposition header: missing field name in `' + header + '`');\r\n  }\r\n  return out;\r\n}\r\nfunction parsePartHeaders(lines) {\r\n  const entries = [];\r\n  let disposition = false;\r\n  let line;\r\n  while (typeof (line = lines.shift()) !== 'undefined') {\r\n    const colon = line.indexOf(':');\r\n    if (colon === -1) {\r\n      throw new Error('malformed multipart-form header: missing colon');\r\n    }\r\n    const header = line.slice(0, colon).trim().toLowerCase();\r\n    const value = line.slice(colon + 1).trim();\r\n    switch (header) {\r\n    case 'content-disposition':\r\n      disposition = true;\r\n      entries.push(...Object.entries(parseContentDisposition(value)));\r\n      break;\r\n    case 'content-type':\r\n      entries.push([\r\n        'contentType',\r\n        value\r\n      ]);\r\n    }\r\n  }\r\n  if (!disposition) {\r\n    throw new Error('malformed multipart-form header: missing content-disposition');\r\n  }\r\n  return Object.fromEntries(entries);\r\n}\r\nasync function readHeaderLines(it, needle) {\r\n  let firstChunk = true;\r\n  let lastTokenWasMatch = false;\r\n  const headerLines = [[]];\r\n  const crlfSearch = new StreamSearch(CRLF);\r\n  for (;;) {\r\n    const result = await it.next();\r\n    if (result.done) {\r\n      throw new Error('malformed multipart-form data: unexpected end of stream');\r\n    }\r\n    if (firstChunk && result.value !== MATCH && arraysEqual(result.value.slice(0, 2), dash)) {\r\n      return [\r\n        undefined,\r\n        new Uint8Array()\r\n      ];\r\n    }\r\n    let chunk;\r\n    if (result.value !== MATCH) {\r\n      chunk = result.value;\r\n    } else if (!lastTokenWasMatch) {\r\n      chunk = needle;\r\n    } else {\r\n      throw new Error('malformed multipart-form data: unexpected boundary');\r\n    }\r\n    if (!chunk.length) {\r\n      continue;\r\n    }\r\n    if (firstChunk) {\r\n      firstChunk = false;\r\n    }\r\n    const tokens = crlfSearch.feed(chunk);\r\n    for (const [i, token] of tokens.entries()) {\r\n      const isMatch = token === MATCH;\r\n      if (!isMatch && !token.length) {\r\n        continue;\r\n      }\r\n      if (lastTokenWasMatch && isMatch) {\r\n        tokens.push(crlfSearch.end());\r\n        return [\r\n          headerLines.filter(chunks => chunks.length).map(mergeArrays2).map(arrayToString),\r\n          mergeArrays(...tokens.slice(i + 1).map(token => token === MATCH ? CRLF : token))\r\n        ];\r\n      }\r\n      if (lastTokenWasMatch = isMatch) {\r\n        headerLines.push([]);\r\n      } else {\r\n        headerLines[headerLines.length - 1].push(token);\r\n      }\r\n    }\r\n  }\r\n}\r\nexport async function* streamMultipart(body, boundary) {\r\n  const needle = mergeArrays(dash, stringToArray(boundary));\r\n  const it = new ReadableStreamSearch(needle, body)[Symbol.asyncIterator]();\r\n  for (;;) {\r\n    const result = await it.next();\r\n    if (result.done) {\r\n      return;\r\n    }\r\n    if (result.value === MATCH) {\r\n      break;\r\n    }\r\n  }\r\n  const crlfSearch = new StreamSearch(CRLF);\r\n  for (;;) {\r\n    const [headerLines, tail] = await readHeaderLines(it, needle);\r\n    if (!headerLines) {\r\n      return;\r\n    }\r\n    async function nextToken() {\r\n      const result = await it.next();\r\n      if (result.done) {\r\n        throw new Error('malformed multipart-form data: unexpected end of stream');\r\n      }\r\n      return result;\r\n    }\r\n    let trailingCRLF = false;\r\n    function feedChunk(chunk) {\r\n      const chunks = [];\r\n      for (const token of crlfSearch.feed(chunk)) {\r\n        if (trailingCRLF) {\r\n          chunks.push(CRLF);\r\n        }\r\n        if (!(trailingCRLF = token === MATCH)) {\r\n          chunks.push(token);\r\n        }\r\n      }\r\n      return mergeArrays(...chunks);\r\n    }\r\n    let done = false;\r\n    async function nextChunk() {\r\n      const result = await nextToken();\r\n      let chunk;\r\n      if (result.value !== MATCH) {\r\n        chunk = result.value;\r\n      } else if (!trailingCRLF) {\r\n        chunk = CRLF;\r\n      } else {\r\n        done = true;\r\n        return { value: crlfSearch.end() };\r\n      }\r\n      return { value: feedChunk(chunk) };\r\n    }\r\n    const bufferedChunks = [{ value: feedChunk(tail) }];\r\n    yield {\r\n      ...parsePartHeaders(headerLines),\r\n      data: {\r\n        [Symbol.asyncIterator]() {\r\n          return this;\r\n        },\r\n        async next() {\r\n          for (;;) {\r\n            const result = bufferedChunks.shift();\r\n            if (!result) {\r\n              break;\r\n            }\r\n            if (result.value.length > 0) {\r\n              return result;\r\n            }\r\n          }\r\n          for (;;) {\r\n            if (done) {\r\n              return {\r\n                done,\r\n                value: undefined\r\n              };\r\n            }\r\n            const result = await nextChunk();\r\n            if (result.value.length > 0) {\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n    while (!done) {\r\n      bufferedChunks.push(await nextChunk());\r\n    }\r\n  }\r\n}\r\nexport async function* iterateMultipart(body, boundary) {\r\n  for await (const part of streamMultipart(body, boundary)) {\r\n    const chunks = [];\r\n    for await (const chunk of part.data) {\r\n      chunks.push(chunk);\r\n    }\r\n    yield {\r\n      ...part,\r\n      data: mergeArrays(...chunks)\r\n    };\r\n  }\r\n}", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport { streamMultipart } from '@web3-storage/multipart-parser';\r\n\r\n// @ts-ignore\r\nfunction composeUploadHandlers(...handlers) {\r\n  return async part => {\r\n    for (let handler of handlers) {\r\n      let value = await handler(part);\r\n      if (typeof value !== \"undefined\" && value !== null) {\r\n        return value;\r\n      }\r\n    }\r\n    return undefined;\r\n  };\r\n}\r\n\r\n/**\r\n * Allows you to handle multipart forms (file uploads) for your app.\r\n *\r\n * TODO: Update this comment\r\n * @see https://remix.run/utils/parse-multipart-form-data\r\n */\r\nasync function parseMultipartFormData(request, uploadHandler) {\r\n  let contentType = request.headers.get(\"Content-Type\") || \"\";\r\n  let [type, boundary] = contentType.split(/\\s*;\\s*boundary=/);\r\n  if (!request.body || !boundary || type !== \"multipart/form-data\") {\r\n    throw new TypeError(\"Could not parse content as FormData.\");\r\n  }\r\n  let formData = new FormData();\r\n  let parts = streamMultipart(request.body, boundary);\r\n  for await (let part of parts) {\r\n    if (part.done) break;\r\n    if (typeof part.filename === \"string\") {\r\n      // only pass basename as the multipart/form-data spec recommends\r\n      // https://datatracker.ietf.org/doc/html/rfc7578#section-4.2\r\n      part.filename = part.filename.split(/[/\\\\]/).pop();\r\n    }\r\n    let value = await uploadHandler(part);\r\n    if (typeof value !== \"undefined\" && value !== null) {\r\n      formData.append(part.name, value);\r\n    }\r\n  }\r\n  return formData;\r\n}\r\n\r\nexport { composeUploadHandlers, parseMultipartFormData };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nfunction createEntryRouteModules(manifest) {\r\n  return Object.keys(manifest).reduce((memo, routeId) => {\r\n    memo[routeId] = manifest[routeId].module;\r\n    return memo;\r\n  }, {});\r\n}\r\n\r\nexport { createEntryRouteModules };\r\n", "\"use strict\";\r\n\r\nvar defaultParseOptions = {\r\n  decodeValues: true,\r\n  map: false,\r\n  silent: false,\r\n};\r\n\r\nfunction isNonEmptyString(str) {\r\n  return typeof str === \"string\" && !!str.trim();\r\n}\r\n\r\nfunction parseString(setCookieValue, options) {\r\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\r\n\r\n  var nameValuePairStr = parts.shift();\r\n  var parsed = parseNameValuePair(nameValuePairStr);\r\n  var name = parsed.name;\r\n  var value = parsed.value;\r\n\r\n  options = options\r\n    ? Object.assign({}, defaultParseOptions, options)\r\n    : defaultParseOptions;\r\n\r\n  try {\r\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\r\n  } catch (e) {\r\n    console.error(\r\n      \"set-cookie-parser encountered an error while decoding a cookie with value '\" +\r\n        value +\r\n        \"'. Set options.decodeValues to false to disable this feature.\",\r\n      e\r\n    );\r\n  }\r\n\r\n  var cookie = {\r\n    name: name,\r\n    value: value,\r\n  };\r\n\r\n  parts.forEach(function (part) {\r\n    var sides = part.split(\"=\");\r\n    var key = sides.shift().trimLeft().toLowerCase();\r\n    var value = sides.join(\"=\");\r\n    if (key === \"expires\") {\r\n      cookie.expires = new Date(value);\r\n    } else if (key === \"max-age\") {\r\n      cookie.maxAge = parseInt(value, 10);\r\n    } else if (key === \"secure\") {\r\n      cookie.secure = true;\r\n    } else if (key === \"httponly\") {\r\n      cookie.httpOnly = true;\r\n    } else if (key === \"samesite\") {\r\n      cookie.sameSite = value;\r\n    } else {\r\n      cookie[key] = value;\r\n    }\r\n  });\r\n\r\n  return cookie;\r\n}\r\n\r\nfunction parseNameValuePair(nameValuePairStr) {\r\n  // Parses name-value-pair according to rfc6265bis draft\r\n\r\n  var name = \"\";\r\n  var value = \"\";\r\n  var nameValueArr = nameValuePairStr.split(\"=\");\r\n  if (nameValueArr.length > 1) {\r\n    name = nameValueArr.shift();\r\n    value = nameValueArr.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\r\n  } else {\r\n    value = nameValuePairStr;\r\n  }\r\n\r\n  return { name: name, value: value };\r\n}\r\n\r\nfunction parse(input, options) {\r\n  options = options\r\n    ? Object.assign({}, defaultParseOptions, options)\r\n    : defaultParseOptions;\r\n\r\n  if (!input) {\r\n    if (!options.map) {\r\n      return [];\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  if (input.headers) {\r\n    if (typeof input.headers.getSetCookie === \"function\") {\r\n      // for fetch responses - they combine headers of the same type in the headers array,\r\n      // but getSetCookie returns an uncombined array\r\n      input = input.headers.getSetCookie();\r\n    } else if (input.headers[\"set-cookie\"]) {\r\n      // fast-path for node.js (which automatically normalizes header names to lower-case\r\n      input = input.headers[\"set-cookie\"];\r\n    } else {\r\n      // slow-path for other environments - see #25\r\n      var sch =\r\n        input.headers[\r\n          Object.keys(input.headers).find(function (key) {\r\n            return key.toLowerCase() === \"set-cookie\";\r\n          })\r\n        ];\r\n      // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\r\n      if (!sch && input.headers.cookie && !options.silent) {\r\n        console.warn(\r\n          \"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\"\r\n        );\r\n      }\r\n      input = sch;\r\n    }\r\n  }\r\n  if (!Array.isArray(input)) {\r\n    input = [input];\r\n  }\r\n\r\n  options = options\r\n    ? Object.assign({}, defaultParseOptions, options)\r\n    : defaultParseOptions;\r\n\r\n  if (!options.map) {\r\n    return input.filter(isNonEmptyString).map(function (str) {\r\n      return parseString(str, options);\r\n    });\r\n  } else {\r\n    var cookies = {};\r\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\r\n      var cookie = parseString(str, options);\r\n      cookies[cookie.name] = cookie;\r\n      return cookies;\r\n    }, cookies);\r\n  }\r\n}\r\n\r\n/*\r\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\r\n  that are within a single set-cookie field-value, such as in the Expires portion.\r\n\r\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\r\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\r\n  React Native's fetch does this for *every* header, including set-cookie.\r\n\r\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\r\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\r\n*/\r\nfunction splitCookiesString(cookiesString) {\r\n  if (Array.isArray(cookiesString)) {\r\n    return cookiesString;\r\n  }\r\n  if (typeof cookiesString !== \"string\") {\r\n    return [];\r\n  }\r\n\r\n  var cookiesStrings = [];\r\n  var pos = 0;\r\n  var start;\r\n  var ch;\r\n  var lastComma;\r\n  var nextStart;\r\n  var cookiesSeparatorFound;\r\n\r\n  function skipWhitespace() {\r\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\r\n      pos += 1;\r\n    }\r\n    return pos < cookiesString.length;\r\n  }\r\n\r\n  function notSpecialChar() {\r\n    ch = cookiesString.charAt(pos);\r\n\r\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\r\n  }\r\n\r\n  while (pos < cookiesString.length) {\r\n    start = pos;\r\n    cookiesSeparatorFound = false;\r\n\r\n    while (skipWhitespace()) {\r\n      ch = cookiesString.charAt(pos);\r\n      if (ch === \",\") {\r\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\r\n        lastComma = pos;\r\n        pos += 1;\r\n\r\n        skipWhitespace();\r\n        nextStart = pos;\r\n\r\n        while (pos < cookiesString.length && notSpecialChar()) {\r\n          pos += 1;\r\n        }\r\n\r\n        // currently special character\r\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\r\n          // we found cookies separator\r\n          cookiesSeparatorFound = true;\r\n          // pos is inside the next cookie, so back up and return it.\r\n          pos = nextStart;\r\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\r\n          start = pos;\r\n        } else {\r\n          // in param ',' or param separator ';',\r\n          // we continue from that comma\r\n          pos = lastComma + 1;\r\n        }\r\n      } else {\r\n        pos += 1;\r\n      }\r\n    }\r\n\r\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\r\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\r\n    }\r\n  }\r\n\r\n  return cookiesStrings;\r\n}\r\n\r\nmodule.exports = parse;\r\nmodule.exports.parse = parse;\r\nmodule.exports.parseString = parseString;\r\nmodule.exports.splitCookiesString = splitCookiesString;\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport { splitCookiesString } from 'set-cookie-parser';\r\n\r\nfunction getDocumentHeadersRR(build, context) {\r\n  let boundaryIdx = context.errors ? context.matches.findIndex(m => context.errors[m.route.id]) : -1;\r\n  let matches = boundaryIdx >= 0 ? context.matches.slice(0, boundaryIdx + 1) : context.matches;\r\n  let errorHeaders;\r\n  if (boundaryIdx >= 0) {\r\n    // Look for any errorHeaders from the boundary route down, which can be\r\n    // identified by the presence of headers but no data\r\n    let {\r\n      actionHeaders,\r\n      actionData,\r\n      loaderHeaders,\r\n      loaderData\r\n    } = context;\r\n    context.matches.slice(boundaryIdx).some(match => {\r\n      let id = match.route.id;\r\n      if (actionHeaders[id] && (!actionData || actionData[id] === undefined)) {\r\n        errorHeaders = actionHeaders[id];\r\n      } else if (loaderHeaders[id] && loaderData[id] === undefined) {\r\n        errorHeaders = loaderHeaders[id];\r\n      }\r\n      return errorHeaders != null;\r\n    });\r\n  }\r\n  return matches.reduce((parentHeaders, match, idx) => {\r\n    let {\r\n      id\r\n    } = match.route;\r\n    let routeModule = build.routes[id].module;\r\n    let loaderHeaders = context.loaderHeaders[id] || new Headers();\r\n    let actionHeaders = context.actionHeaders[id] || new Headers();\r\n\r\n    // Only expose errorHeaders to the leaf headers() function to\r\n    // avoid duplication via parentHeaders\r\n    let includeErrorHeaders = errorHeaders != undefined && idx === matches.length - 1;\r\n    // Only prepend cookies from errorHeaders at the leaf renderable route\r\n    // when it's not the same as loaderHeaders/actionHeaders to avoid\r\n    // duplicate cookies\r\n    let includeErrorCookies = includeErrorHeaders && errorHeaders !== loaderHeaders && errorHeaders !== actionHeaders;\r\n\r\n    // Use the parent headers for any route without a `headers` export\r\n    if (routeModule.headers == null) {\r\n      let headers = new Headers(parentHeaders);\r\n      if (includeErrorCookies) {\r\n        prependCookies(errorHeaders, headers);\r\n      }\r\n      prependCookies(actionHeaders, headers);\r\n      prependCookies(loaderHeaders, headers);\r\n      return headers;\r\n    }\r\n    let headers = new Headers(routeModule.headers ? typeof routeModule.headers === \"function\" ? routeModule.headers({\r\n      loaderHeaders,\r\n      parentHeaders,\r\n      actionHeaders,\r\n      errorHeaders: includeErrorHeaders ? errorHeaders : undefined\r\n    }) : routeModule.headers : undefined);\r\n\r\n    // Automatically preserve Set-Cookie headers from bubbled responses,\r\n    // loaders, errors, and parent routes\r\n    if (includeErrorCookies) {\r\n      prependCookies(errorHeaders, headers);\r\n    }\r\n    prependCookies(actionHeaders, headers);\r\n    prependCookies(loaderHeaders, headers);\r\n    prependCookies(parentHeaders, headers);\r\n    return headers;\r\n  }, new Headers());\r\n}\r\nfunction prependCookies(parentHeaders, childHeaders) {\r\n  let parentSetCookieString = parentHeaders.get(\"Set-Cookie\");\r\n  if (parentSetCookieString) {\r\n    let cookies = splitCookiesString(parentSetCookieString);\r\n    cookies.forEach(cookie => {\r\n      childHeaders.append(\"Set-Cookie\", cookie);\r\n    });\r\n  }\r\n}\r\n\r\nexport { getDocumentHeadersRR };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nfunction invariant(value, message) {\r\n  if (value === false || value === null || typeof value === \"undefined\") {\r\n    console.error(\"The following error is a bug in Remix; please open an issue! https://github.com/remix-run/remix/issues/new\");\r\n    throw new Error(message);\r\n  }\r\n}\r\n\r\nexport { invariant as default };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport { matchRoutes } from '@remix-run/router';\r\n\r\nfunction matchServerRoutes(routes, pathname, basename) {\r\n  let matches = matchRoutes(routes, pathname, basename);\r\n  if (!matches) return null;\r\n  return matches.map(match => ({\r\n    params: match.params,\r\n    pathname: match.pathname,\r\n    route: match.route\r\n  }));\r\n}\r\n\r\nexport { matchServerRoutes };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport { isResponse, json, isDeferredData, isRedirectStatusCode, redirect } from './responses.js';\r\n\r\n/**\r\n * An object of unknown type for route loaders and actions provided by the\r\n * server's `getLoadContext()` function.  This is defined as an empty interface\r\n * specifically so apps can leverage declaration merging to augment this type\r\n * globally: https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n */\r\n\r\n/**\r\n * Data for a route that was returned from a `loader()`.\r\n */\r\n\r\nasync function callRouteActionRR({\r\n  loadContext,\r\n  action,\r\n  params,\r\n  request,\r\n  routeId\r\n}) {\r\n  let result = await action({\r\n    request: stripDataParam(stripIndexParam(request)),\r\n    context: loadContext,\r\n    params\r\n  });\r\n  if (result === undefined) {\r\n    throw new Error(`You defined an action for route \"${routeId}\" but didn't return ` + `anything from your \\`action\\` function. Please return a value or \\`null\\`.`);\r\n  }\r\n  return isResponse(result) ? result : json(result);\r\n}\r\nasync function callRouteLoaderRR({\r\n  loadContext,\r\n  loader,\r\n  params,\r\n  request,\r\n  routeId\r\n}) {\r\n  let result = await loader({\r\n    request: stripDataParam(stripIndexParam(request)),\r\n    context: loadContext,\r\n    params\r\n  });\r\n  if (result === undefined) {\r\n    throw new Error(`You defined a loader for route \"${routeId}\" but didn't return ` + `anything from your \\`loader\\` function. Please return a value or \\`null\\`.`);\r\n  }\r\n  if (isDeferredData(result)) {\r\n    if (result.init && isRedirectStatusCode(result.init.status || 200)) {\r\n      return redirect(new Headers(result.init.headers).get(\"Location\"), result.init);\r\n    }\r\n    return result;\r\n  }\r\n  return isResponse(result) ? result : json(result);\r\n}\r\n\r\n// TODO: Document these search params better\r\n// and stop stripping these in V2. These break\r\n// support for running in a SW and also expose\r\n// valuable info to data funcs that is being asked\r\n// for such as \"is this a data request?\".\r\nfunction stripIndexParam(request) {\r\n  let url = new URL(request.url);\r\n  let indexValues = url.searchParams.getAll(\"index\");\r\n  url.searchParams.delete(\"index\");\r\n  let indexValuesToKeep = [];\r\n  for (let indexValue of indexValues) {\r\n    if (indexValue) {\r\n      indexValuesToKeep.push(indexValue);\r\n    }\r\n  }\r\n  for (let toKeep of indexValuesToKeep) {\r\n    url.searchParams.append(\"index\", toKeep);\r\n  }\r\n  let init = {\r\n    method: request.method,\r\n    body: request.body,\r\n    headers: request.headers,\r\n    signal: request.signal\r\n  };\r\n  if (init.body) {\r\n    init.duplex = \"half\";\r\n  }\r\n  return new Request(url.href, init);\r\n}\r\nfunction stripDataParam(request) {\r\n  let url = new URL(request.url);\r\n  url.searchParams.delete(\"_data\");\r\n  let init = {\r\n    method: request.method,\r\n    body: request.body,\r\n    headers: request.headers,\r\n    signal: request.signal\r\n  };\r\n  if (init.body) {\r\n    init.duplex = \"half\";\r\n  }\r\n  return new Request(url.href, init);\r\n}\r\n\r\nexport { callRouteActionRR, callRouteLoaderRR };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport { callRouteLoaderRR, callRouteActionRR } from './data.js';\r\n\r\n// NOTE: make sure to change the Route in remix-react if you change this\r\n\r\n// NOTE: make sure to change the EntryRoute in remix-react if you change this\r\n\r\nfunction groupRoutesByParentId(manifest) {\r\n  let routes = {};\r\n  Object.values(manifest).forEach(route => {\r\n    let parentId = route.parentId || \"\";\r\n    if (!routes[parentId]) {\r\n      routes[parentId] = [];\r\n    }\r\n    routes[parentId].push(route);\r\n  });\r\n  return routes;\r\n}\r\n\r\n// Create a map of routes by parentId to use recursively instead of\r\n// repeatedly filtering the manifest.\r\nfunction createRoutes(manifest, parentId = \"\", routesByParentId = groupRoutesByParentId(manifest)) {\r\n  return (routesByParentId[parentId] || []).map(route => ({\r\n    ...route,\r\n    children: createRoutes(manifest, route.id, routesByParentId)\r\n  }));\r\n}\r\n\r\n// Convert the Remix ServerManifest into DataRouteObject's for use with\r\n// createStaticHandler\r\nfunction createStaticHandlerDataRoutes(manifest, future, parentId = \"\", routesByParentId = groupRoutesByParentId(manifest)) {\r\n  return (routesByParentId[parentId] || []).map(route => {\r\n    let commonRoute = {\r\n      // Always include root due to default boundaries\r\n      hasErrorBoundary: route.id === \"root\" || route.module.ErrorBoundary != null,\r\n      id: route.id,\r\n      path: route.path,\r\n      loader: route.module.loader ?\r\n      // Need to use RR's version here to permit the optional context even\r\n      // though we know it'll always be provided in remix\r\n      args => callRouteLoaderRR({\r\n        request: args.request,\r\n        params: args.params,\r\n        loadContext: args.context,\r\n        loader: route.module.loader,\r\n        routeId: route.id\r\n      }) : undefined,\r\n      action: route.module.action ? args => callRouteActionRR({\r\n        request: args.request,\r\n        params: args.params,\r\n        loadContext: args.context,\r\n        action: route.module.action,\r\n        routeId: route.id\r\n      }) : undefined,\r\n      handle: route.module.handle\r\n    };\r\n    return route.index ? {\r\n      index: true,\r\n      ...commonRoute\r\n    } : {\r\n      caseSensitive: route.caseSensitive,\r\n      children: createStaticHandlerDataRoutes(manifest, future, route.id, routesByParentId),\r\n      ...commonRoute\r\n    };\r\n  });\r\n}\r\n\r\nexport { createRoutes, createStaticHandlerDataRoutes };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\n// This escapeHtml utility is based on https://github.com/zertosh/htmlescape\r\n// License: https://github.com/zertosh/htmlescape/blob/0527ca7156a524d256101bb310a9f970f63078ad/LICENSE\r\n\r\n// We've chosen to inline the utility here to reduce the number of npm dependencies we have,\r\n// slightly decrease the code size compared the original package and make it esm compatible.\r\n\r\nconst ESCAPE_LOOKUP = {\r\n  \"&\": \"\\\\u0026\",\r\n  \">\": \"\\\\u003e\",\r\n  \"<\": \"\\\\u003c\",\r\n  \"\\u2028\": \"\\\\u2028\",\r\n  \"\\u2029\": \"\\\\u2029\"\r\n};\r\nconst ESCAPE_REGEX = /[&><\\u2028\\u2029]/g;\r\nfunction escapeHtml(html) {\r\n  return html.replace(ESCAPE_REGEX, match => ESCAPE_LOOKUP[match]);\r\n}\r\n\r\nexport { escapeHtml };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport { escapeHtml } from './markup.js';\r\n\r\n// TODO: Remove Promises from serialization\r\nfunction createServerHandoffString(serverHandoff) {\r\n  // Uses faster alternative of jsesc to escape data returned from the loaders.\r\n  // This string is inserted directly into the HTML in the `<Scripts>` element.\r\n  return escapeHtml(JSON.stringify(serverHandoff));\r\n}\r\n\r\nexport { createServerHandoffString };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nasync function broadcastDevReady(build, origin) {\r\n  origin ??= process.env.REMIX_DEV_ORIGIN;\r\n  if (!origin) throw Error(\"Dev server origin not set\");\r\n  let url = new URL(origin);\r\n  url.pathname = \"ping\";\r\n  let response = await fetch(url.href, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify({\r\n      buildHash: build.assets.version\r\n    })\r\n  }).catch(error => {\r\n    console.error(`Could not reach Remix dev server at ${url}`);\r\n    throw error;\r\n  });\r\n  if (!response.ok) {\r\n    console.error(`Could not reach Remix dev server at ${url} (${response.status})`);\r\n    throw Error(await response.text());\r\n  }\r\n}\r\nfunction logDevReady(build) {\r\n  console.log(`[REMIX DEV] ${build.assets.version} ready`);\r\n}\r\nconst globalDevServerHooksKey = \"__remix_devServerHooks\";\r\nfunction setDevServerHooks(devServerHooks) {\r\n  // @ts-expect-error\r\n  globalThis[globalDevServerHooksKey] = devServerHooks;\r\n}\r\nfunction getDevServerHooks() {\r\n  // @ts-expect-error\r\n  return globalThis[globalDevServerHooksKey];\r\n}\r\n\r\nexport { broadcastDevReady, getDevServerHooks, logDevReady, setDevServerHooks };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport { stripBasename, UNSAFE_DEFERRED_SYMBOL, isRouteErrorResponse, json, UNSAFE_ErrorResponseImpl, getStaticContextFromError, createStaticHandler } from '@remix-run/router';\r\nimport { createEntryRouteModules } from './entry.js';\r\nimport { serializeError, sanitizeErrors, serializeErrors } from './errors.js';\r\nimport { getDocumentHeadersRR } from './headers.js';\r\nimport invariant from './invariant.js';\r\nimport { ServerMode, isServerMode } from './mode.js';\r\nimport { matchServerRoutes } from './routeMatching.js';\r\nimport { createRoutes, createStaticHandlerDataRoutes } from './routes.js';\r\nimport { isRedirectResponse, createDeferredReadableStream, isResponse } from './responses.js';\r\nimport { createServerHandoffString } from './serverHandoff.js';\r\nimport { getDevServerHooks } from './dev.js';\r\n\r\nfunction derive(build, mode) {\r\n  var _build$future, _build$future2;\r\n  let routes = createRoutes(build.routes);\r\n  let dataRoutes = createStaticHandlerDataRoutes(build.routes, build.future);\r\n  let serverMode = isServerMode(mode) ? mode : ServerMode.Production;\r\n  let staticHandler = createStaticHandler(dataRoutes, {\r\n    basename: build.basename,\r\n    future: {\r\n      v7_relativeSplatPath: ((_build$future = build.future) === null || _build$future === void 0 ? void 0 : _build$future.v3_relativeSplatPath) === true,\r\n      v7_throwAbortReason: ((_build$future2 = build.future) === null || _build$future2 === void 0 ? void 0 : _build$future2.v3_throwAbortReason) === true\r\n    }\r\n  });\r\n  let errorHandler = build.entry.module.handleError || ((error, {\r\n    request\r\n  }) => {\r\n    if (serverMode !== ServerMode.Test && !request.signal.aborted) {\r\n      console.error(\r\n      // @ts-expect-error This is \"private\" from users but intended for internal use\r\n      isRouteErrorResponse(error) && error.error ? error.error : error);\r\n    }\r\n  });\r\n  return {\r\n    routes,\r\n    dataRoutes,\r\n    serverMode,\r\n    staticHandler,\r\n    errorHandler\r\n  };\r\n}\r\nconst createRequestHandler = (build, mode) => {\r\n  let _build;\r\n  let routes;\r\n  let serverMode;\r\n  let staticHandler;\r\n  let errorHandler;\r\n  return async function requestHandler(request, loadContext = {}) {\r\n    _build = typeof build === \"function\" ? await build() : build;\r\n    mode ??= _build.mode;\r\n    if (typeof build === \"function\") {\r\n      let derived = derive(_build, mode);\r\n      routes = derived.routes;\r\n      serverMode = derived.serverMode;\r\n      staticHandler = derived.staticHandler;\r\n      errorHandler = derived.errorHandler;\r\n    } else if (!routes || !serverMode || !staticHandler || !errorHandler) {\r\n      let derived = derive(_build, mode);\r\n      routes = derived.routes;\r\n      serverMode = derived.serverMode;\r\n      staticHandler = derived.staticHandler;\r\n      errorHandler = derived.errorHandler;\r\n    }\r\n    let url = new URL(request.url);\r\n    let matches = matchServerRoutes(routes, url.pathname, _build.basename);\r\n    let handleError = error => {\r\n      if (mode === ServerMode.Development) {\r\n        var _getDevServerHooks, _getDevServerHooks$pr;\r\n        (_getDevServerHooks = getDevServerHooks()) === null || _getDevServerHooks === void 0 ? void 0 : (_getDevServerHooks$pr = _getDevServerHooks.processRequestError) === null || _getDevServerHooks$pr === void 0 ? void 0 : _getDevServerHooks$pr.call(_getDevServerHooks, error);\r\n      }\r\n      errorHandler(error, {\r\n        context: loadContext,\r\n        params: matches && matches.length > 0 ? matches[0].params : {},\r\n        request\r\n      });\r\n    };\r\n    let response;\r\n    if (url.searchParams.has(\"_data\")) {\r\n      let routeId = url.searchParams.get(\"_data\");\r\n      response = await handleDataRequestRR(serverMode, _build, staticHandler, routeId, request, loadContext, handleError);\r\n      if (_build.entry.module.handleDataRequest) {\r\n        var _matches$find;\r\n        response = await _build.entry.module.handleDataRequest(response, {\r\n          context: loadContext,\r\n          params: (matches === null || matches === void 0 ? void 0 : (_matches$find = matches.find(m => m.route.id == routeId)) === null || _matches$find === void 0 ? void 0 : _matches$find.params) || {},\r\n          request\r\n        });\r\n      }\r\n    } else if (matches && matches[matches.length - 1].route.module.default == null && matches[matches.length - 1].route.module.ErrorBoundary == null) {\r\n      response = await handleResourceRequestRR(serverMode, staticHandler, matches.slice(-1)[0].route.id, request, loadContext, handleError);\r\n    } else {\r\n      var _getDevServerHooks2, _getDevServerHooks2$g;\r\n      let criticalCss = mode === ServerMode.Development ? await ((_getDevServerHooks2 = getDevServerHooks()) === null || _getDevServerHooks2 === void 0 ? void 0 : (_getDevServerHooks2$g = _getDevServerHooks2.getCriticalCss) === null || _getDevServerHooks2$g === void 0 ? void 0 : _getDevServerHooks2$g.call(_getDevServerHooks2, _build, url.pathname)) : undefined;\r\n      response = await handleDocumentRequestRR(serverMode, _build, staticHandler, request, loadContext, handleError, criticalCss);\r\n    }\r\n    if (request.method === \"HEAD\") {\r\n      return new Response(null, {\r\n        headers: response.headers,\r\n        status: response.status,\r\n        statusText: response.statusText\r\n      });\r\n    }\r\n    return response;\r\n  };\r\n};\r\nasync function handleDataRequestRR(serverMode, build, staticHandler, routeId, request, loadContext, handleError) {\r\n  try {\r\n    let response = await staticHandler.queryRoute(request, {\r\n      routeId,\r\n      requestContext: loadContext\r\n    });\r\n    if (isRedirectResponse(response)) {\r\n      // We don't have any way to prevent a fetch request from following\r\n      // redirects. So we use the `X-Remix-Redirect` header to indicate the\r\n      // next URL, and then \"follow\" the redirect manually on the client.\r\n      let headers = new Headers(response.headers);\r\n      let redirectUrl = headers.get(\"Location\");\r\n      headers.set(\"X-Remix-Redirect\", build.basename ? stripBasename(redirectUrl, build.basename) || redirectUrl : redirectUrl);\r\n      headers.set(\"X-Remix-Status\", response.status);\r\n      headers.delete(\"Location\");\r\n      if (response.headers.get(\"Set-Cookie\") !== null) {\r\n        headers.set(\"X-Remix-Revalidate\", \"yes\");\r\n      }\r\n      return new Response(null, {\r\n        status: 204,\r\n        headers\r\n      });\r\n    }\r\n    if (UNSAFE_DEFERRED_SYMBOL in response) {\r\n      let deferredData = response[UNSAFE_DEFERRED_SYMBOL];\r\n      let body = createDeferredReadableStream(deferredData, request.signal, serverMode);\r\n      let init = deferredData.init || {};\r\n      let headers = new Headers(init.headers);\r\n      headers.set(\"Content-Type\", \"text/remix-deferred\");\r\n      // Mark successful responses with a header so we can identify in-flight\r\n      // network errors that are missing this header\r\n      headers.set(\"X-Remix-Response\", \"yes\");\r\n      init.headers = headers;\r\n      return new Response(body, init);\r\n    }\r\n\r\n    // Mark all successful responses with a header so we can identify in-flight\r\n    // network errors that are missing this header\r\n    response.headers.set(\"X-Remix-Response\", \"yes\");\r\n    return response;\r\n  } catch (error) {\r\n    if (isResponse(error)) {\r\n      error.headers.set(\"X-Remix-Catch\", \"yes\");\r\n      return error;\r\n    }\r\n    if (isRouteErrorResponse(error)) {\r\n      if (error) {\r\n        handleError(error);\r\n      }\r\n      return errorResponseToJson(error, serverMode);\r\n    }\r\n    let errorInstance = error instanceof Error || error instanceof DOMException ? error : new Error(\"Unexpected Server Error\");\r\n    handleError(errorInstance);\r\n    return json(serializeError(errorInstance, serverMode), {\r\n      status: 500,\r\n      headers: {\r\n        \"X-Remix-Error\": \"yes\"\r\n      }\r\n    });\r\n  }\r\n}\r\nasync function handleDocumentRequestRR(serverMode, build, staticHandler, request, loadContext, handleError, criticalCss) {\r\n  let context;\r\n  try {\r\n    context = await staticHandler.query(request, {\r\n      requestContext: loadContext\r\n    });\r\n  } catch (error) {\r\n    handleError(error);\r\n    return new Response(null, {\r\n      status: 500\r\n    });\r\n  }\r\n  if (isResponse(context)) {\r\n    return context;\r\n  }\r\n\r\n  // Sanitize errors outside of development environments\r\n  if (context.errors) {\r\n    Object.values(context.errors).forEach(err => {\r\n      // @ts-expect-error This is \"private\" from users but intended for internal use\r\n      if (!isRouteErrorResponse(err) || err.error) {\r\n        handleError(err);\r\n      }\r\n    });\r\n    context.errors = sanitizeErrors(context.errors, serverMode);\r\n  }\r\n  let headers = getDocumentHeadersRR(build, context);\r\n  let entryContext = {\r\n    manifest: build.assets,\r\n    routeModules: createEntryRouteModules(build.routes),\r\n    staticHandlerContext: context,\r\n    criticalCss,\r\n    serverHandoffString: createServerHandoffString({\r\n      url: context.location.pathname,\r\n      basename: build.basename,\r\n      criticalCss,\r\n      state: {\r\n        loaderData: context.loaderData,\r\n        actionData: context.actionData,\r\n        errors: serializeErrors(context.errors, serverMode)\r\n      },\r\n      future: build.future,\r\n      isSpaMode: build.isSpaMode\r\n    }),\r\n    future: build.future,\r\n    isSpaMode: build.isSpaMode,\r\n    serializeError: err => serializeError(err, serverMode)\r\n  };\r\n  let handleDocumentRequestFunction = build.entry.module.default;\r\n  try {\r\n    return await handleDocumentRequestFunction(request, context.statusCode, headers, entryContext, loadContext);\r\n  } catch (error) {\r\n    handleError(error);\r\n    let errorForSecondRender = error;\r\n\r\n    // If they threw a response, unwrap it into an ErrorResponse like we would\r\n    // have for a loader/action\r\n    if (isResponse(error)) {\r\n      let data;\r\n      try {\r\n        let contentType = error.headers.get(\"Content-Type\");\r\n        // Check between word boundaries instead of startsWith() due to the last\r\n        // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\r\n        if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\r\n          if (error.body == null) {\r\n            data = null;\r\n          } else {\r\n            data = await error.json();\r\n          }\r\n        } else {\r\n          data = await error.text();\r\n        }\r\n        errorForSecondRender = new UNSAFE_ErrorResponseImpl(error.status, error.statusText, data);\r\n      } catch (e) {\r\n        // If we can't unwrap the response - just leave it as-is\r\n      }\r\n    }\r\n\r\n    // Get a new StaticHandlerContext that contains the error at the right boundary\r\n    context = getStaticContextFromError(staticHandler.dataRoutes, context, errorForSecondRender);\r\n\r\n    // Sanitize errors outside of development environments\r\n    if (context.errors) {\r\n      context.errors = sanitizeErrors(context.errors, serverMode);\r\n    }\r\n\r\n    // Update entryContext for the second render pass\r\n    entryContext = {\r\n      ...entryContext,\r\n      staticHandlerContext: context,\r\n      serverHandoffString: createServerHandoffString({\r\n        url: context.location.pathname,\r\n        basename: build.basename,\r\n        state: {\r\n          loaderData: context.loaderData,\r\n          actionData: context.actionData,\r\n          errors: serializeErrors(context.errors, serverMode)\r\n        },\r\n        future: build.future,\r\n        isSpaMode: build.isSpaMode\r\n      })\r\n    };\r\n    try {\r\n      return await handleDocumentRequestFunction(request, context.statusCode, headers, entryContext, loadContext);\r\n    } catch (error) {\r\n      handleError(error);\r\n      return returnLastResortErrorResponse(error, serverMode);\r\n    }\r\n  }\r\n}\r\nasync function handleResourceRequestRR(serverMode, staticHandler, routeId, request, loadContext, handleError) {\r\n  try {\r\n    // Note we keep the routeId here to align with the Remix handling of\r\n    // resource routes which doesn't take ?index into account and just takes\r\n    // the leaf match\r\n    let response = await staticHandler.queryRoute(request, {\r\n      routeId,\r\n      requestContext: loadContext\r\n    });\r\n    invariant(!(UNSAFE_DEFERRED_SYMBOL in response), `You cannot return a \\`defer()\\` response from a Resource Route.  Did you ` + `forget to export a default UI component from the \"${routeId}\" route?`);\r\n    // callRouteLoader/callRouteAction always return responses\r\n    invariant(isResponse(response), \"Expected a Response to be returned from queryRoute\");\r\n    return response;\r\n  } catch (error) {\r\n    if (isResponse(error)) {\r\n      // Note: Not functionally required but ensures that our response headers\r\n      // match identically to what Remix returns\r\n      error.headers.set(\"X-Remix-Catch\", \"yes\");\r\n      return error;\r\n    }\r\n    if (isRouteErrorResponse(error)) {\r\n      if (error) {\r\n        handleError(error);\r\n      }\r\n      return errorResponseToJson(error, serverMode);\r\n    }\r\n    handleError(error);\r\n    return returnLastResortErrorResponse(error, serverMode);\r\n  }\r\n}\r\nfunction errorResponseToJson(errorResponse, serverMode) {\r\n  return json(serializeError(\r\n  // @ts-expect-error This is \"private\" from users but intended for internal use\r\n  errorResponse.error || new Error(\"Unexpected Server Error\"), serverMode), {\r\n    status: errorResponse.status,\r\n    statusText: errorResponse.statusText,\r\n    headers: {\r\n      \"X-Remix-Error\": \"yes\"\r\n    }\r\n  });\r\n}\r\nfunction returnLastResortErrorResponse(error, serverMode) {\r\n  let message = \"Unexpected Server Error\";\r\n  if (serverMode !== ServerMode.Production) {\r\n    message += `\\n\\n${String(error)}`;\r\n  }\r\n\r\n  // Good grief folks, get your act together 😂!\r\n  return new Response(message, {\r\n    status: 500,\r\n    headers: {\r\n      \"Content-Type\": \"text/plain\"\r\n    }\r\n  });\r\n}\r\n\r\nexport { createRequestHandler };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport { isCookie } from './cookies.js';\r\nimport { warnOnce } from './warnings.js';\r\n\r\n/**\r\n * An object of name/value pairs to be used in the session.\r\n */\r\n\r\n/**\r\n * Session persists data across HTTP requests.\r\n *\r\n * @see https://remix.run/utils/sessions#session-api\r\n */\r\n\r\nfunction flash(name) {\r\n  return `__flash_${name}__`;\r\n}\r\n/**\r\n * Creates a new Session object.\r\n *\r\n * Note: This function is typically not invoked directly by application code.\r\n * Instead, use a `SessionStorage` object's `getSession` method.\r\n *\r\n * @see https://remix.run/utils/sessions#createsession\r\n */\r\nconst createSession = (initialData = {}, id = \"\") => {\r\n  let map = new Map(Object.entries(initialData));\r\n  return {\r\n    get id() {\r\n      return id;\r\n    },\r\n    get data() {\r\n      return Object.fromEntries(map);\r\n    },\r\n    has(name) {\r\n      return map.has(name) || map.has(flash(name));\r\n    },\r\n    get(name) {\r\n      if (map.has(name)) return map.get(name);\r\n      let flashName = flash(name);\r\n      if (map.has(flashName)) {\r\n        let value = map.get(flashName);\r\n        map.delete(flashName);\r\n        return value;\r\n      }\r\n      return undefined;\r\n    },\r\n    set(name, value) {\r\n      map.set(name, value);\r\n    },\r\n    flash(name, value) {\r\n      map.set(flash(name), value);\r\n    },\r\n    unset(name) {\r\n      map.delete(name);\r\n    }\r\n  };\r\n};\r\n/**\r\n * Returns true if an object is a Remix session.\r\n *\r\n * @see https://remix.run/utils/sessions#issession\r\n */\r\nconst isSession = object => {\r\n  return object != null && typeof object.id === \"string\" && typeof object.data !== \"undefined\" && typeof object.has === \"function\" && typeof object.get === \"function\" && typeof object.set === \"function\" && typeof object.flash === \"function\" && typeof object.unset === \"function\";\r\n};\r\n\r\n/**\r\n * SessionStorage stores session data between HTTP requests and knows how to\r\n * parse and create cookies.\r\n *\r\n * A SessionStorage creates Session objects using a `Cookie` header as input.\r\n * Then, later it generates the `Set-Cookie` header to be used in the response.\r\n */\r\n\r\n/**\r\n * SessionIdStorageStrategy is designed to allow anyone to easily build their\r\n * own SessionStorage using `createSessionStorage(strategy)`.\r\n *\r\n * This strategy describes a common scenario where the session id is stored in\r\n * a cookie but the actual session data is stored elsewhere, usually in a\r\n * database or on disk. A set of create, read, update, and delete operations\r\n * are provided for managing the session data.\r\n */\r\n\r\n/**\r\n * Creates a SessionStorage object using a SessionIdStorageStrategy.\r\n *\r\n * Note: This is a low-level API that should only be used if none of the\r\n * existing session storage options meet your requirements.\r\n *\r\n * @see https://remix.run/utils/sessions#createsessionstorage\r\n */\r\nconst createSessionStorageFactory = createCookie => ({\r\n  cookie: cookieArg,\r\n  createData,\r\n  readData,\r\n  updateData,\r\n  deleteData\r\n}) => {\r\n  let cookie = isCookie(cookieArg) ? cookieArg : createCookie((cookieArg === null || cookieArg === void 0 ? void 0 : cookieArg.name) || \"__session\", cookieArg);\r\n  warnOnceAboutSigningSessionCookie(cookie);\r\n  return {\r\n    async getSession(cookieHeader, options) {\r\n      let id = cookieHeader && (await cookie.parse(cookieHeader, options));\r\n      let data = id && (await readData(id));\r\n      return createSession(data || {}, id || \"\");\r\n    },\r\n    async commitSession(session, options) {\r\n      let {\r\n        id,\r\n        data\r\n      } = session;\r\n      let expires = (options === null || options === void 0 ? void 0 : options.maxAge) != null ? new Date(Date.now() + options.maxAge * 1000) : (options === null || options === void 0 ? void 0 : options.expires) != null ? options.expires : cookie.expires;\r\n      if (id) {\r\n        await updateData(id, data, expires);\r\n      } else {\r\n        id = await createData(data, expires);\r\n      }\r\n      return cookie.serialize(id, options);\r\n    },\r\n    async destroySession(session, options) {\r\n      await deleteData(session.id);\r\n      return cookie.serialize(\"\", {\r\n        ...options,\r\n        maxAge: undefined,\r\n        expires: new Date(0)\r\n      });\r\n    }\r\n  };\r\n};\r\nfunction warnOnceAboutSigningSessionCookie(cookie) {\r\n  warnOnce(cookie.isSigned, `The \"${cookie.name}\" cookie is not signed, but session cookies should be ` + `signed to prevent tampering on the client before they are sent back to the ` + `server. See https://remix.run/utils/cookies#signing-cookies ` + `for more information.`);\r\n}\r\n\r\nexport { createSession, createSessionStorageFactory, isSession, warnOnceAboutSigningSessionCookie };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport { isCookie } from '../cookies.js';\r\nimport { warnOnceAboutSigningSessionCookie, createSession } from '../sessions.js';\r\n\r\n/**\r\n * Creates and returns a SessionStorage object that stores all session data\r\n * directly in the session cookie itself.\r\n *\r\n * This has the advantage that no database or other backend services are\r\n * needed, and can help to simplify some load-balanced scenarios. However, it\r\n * also has the limitation that serialized session data may not exceed the\r\n * browser's maximum cookie size. Trade-offs!\r\n *\r\n * @see https://remix.run/utils/sessions#createcookiesessionstorage\r\n */\r\nconst createCookieSessionStorageFactory = createCookie => ({\r\n  cookie: cookieArg\r\n} = {}) => {\r\n  let cookie = isCookie(cookieArg) ? cookieArg : createCookie((cookieArg === null || cookieArg === void 0 ? void 0 : cookieArg.name) || \"__session\", cookieArg);\r\n  warnOnceAboutSigningSessionCookie(cookie);\r\n  return {\r\n    async getSession(cookieHeader, options) {\r\n      return createSession(cookieHeader && (await cookie.parse(cookieHeader, options)) || {});\r\n    },\r\n    async commitSession(session, options) {\r\n      let serializedCookie = await cookie.serialize(session.data, options);\r\n      if (serializedCookie.length > 4096) {\r\n        throw new Error(\"Cookie length will exceed browser maximum. Length: \" + serializedCookie.length);\r\n      }\r\n      return serializedCookie;\r\n    },\r\n    async destroySession(_session, options) {\r\n      return cookie.serialize(\"\", {\r\n        ...options,\r\n        maxAge: undefined,\r\n        expires: new Date(0)\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport { createCookieSessionStorageFactory };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\n/**\r\n * Creates and returns a simple in-memory SessionStorage object, mostly useful\r\n * for testing and as a reference implementation.\r\n *\r\n * Note: This storage does not scale beyond a single process, so it is not\r\n * suitable for most production scenarios.\r\n *\r\n * @see https://remix.run/utils/sessions#creatememorysessionstorage\r\n */\r\nconst createMemorySessionStorageFactory = createSessionStorage => ({\r\n  cookie\r\n} = {}) => {\r\n  let map = new Map();\r\n  return createSessionStorage({\r\n    cookie,\r\n    async createData(data, expires) {\r\n      let id = Math.random().toString(36).substring(2, 10);\r\n      map.set(id, {\r\n        data,\r\n        expires\r\n      });\r\n      return id;\r\n    },\r\n    async readData(id) {\r\n      if (map.has(id)) {\r\n        let {\r\n          data,\r\n          expires\r\n        } = map.get(id);\r\n        if (!expires || expires > new Date()) {\r\n          return data;\r\n        }\r\n\r\n        // Remove expired session data.\r\n        if (expires) map.delete(id);\r\n      }\r\n      return null;\r\n    },\r\n    async updateData(id, data, expires) {\r\n      map.set(id, {\r\n        data,\r\n        expires\r\n      });\r\n    },\r\n    async deleteData(id) {\r\n      map.delete(id);\r\n    }\r\n  });\r\n};\r\n\r\nexport { createMemorySessionStorageFactory };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nclass MaxPartSizeExceededError extends Error {\r\n  constructor(field, maxBytes) {\r\n    super(`Field \"${field}\" exceeded upload size of ${maxBytes} bytes.`);\r\n    this.field = field;\r\n    this.maxBytes = maxBytes;\r\n  }\r\n}\r\n\r\nexport { MaxPartSizeExceededError };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport { MaxPartSizeExceededError } from './errors.js';\r\n\r\nfunction createMemoryUploadHandler({\r\n  filter,\r\n  maxPartSize = 3000000\r\n} = {}) {\r\n  return async ({\r\n    filename,\r\n    contentType,\r\n    name,\r\n    data\r\n  }) => {\r\n    if (filter && !(await filter({\r\n      filename,\r\n      contentType,\r\n      name\r\n    }))) {\r\n      return undefined;\r\n    }\r\n    let size = 0;\r\n    let chunks = [];\r\n    for await (let chunk of data) {\r\n      size += chunk.byteLength;\r\n      if (size > maxPartSize) {\r\n        throw new MaxPartSizeExceededError(name, maxPartSize);\r\n      }\r\n      chunks.push(chunk);\r\n    }\r\n    if (typeof filename === \"string\") {\r\n      return new File(chunks, filename, {\r\n        type: contentType\r\n      });\r\n    }\r\n    return await new Blob(chunks, {\r\n      type: contentType\r\n    }).text();\r\n  };\r\n}\r\n\r\nexport { createMemoryUploadHandler };\r\n", "/**\r\n * @remix-run/server-runtime v2.7.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nexport { createCookieFactory, isCookie } from './cookies.js';\r\nexport { composeUploadHandlers as unstable_composeUploadHandlers, parseMultipartFormData as unstable_parseMultipartFormData } from './formData.js';\r\nexport { defer, json, redirect, redirectDocument } from './responses.js';\r\nexport { createRequestHandler } from './server.js';\r\nexport { createSession, createSessionStorageFactory, isSession } from './sessions.js';\r\nexport { createCookieSessionStorageFactory } from './sessions/cookieStorage.js';\r\nexport { createMemorySessionStorageFactory } from './sessions/memoryStorage.js';\r\nexport { createMemoryUploadHandler as unstable_createMemoryUploadHandler } from './upload/memoryUploadHandler.js';\r\nexport { MaxPartSizeExceededError } from './upload/errors.js';\r\nexport { broadcastDevReady, logDevReady, setDevServerHooks as unstable_setDevServerHooks } from './dev.js';\r\n"],
  "mappings": "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",
  "names": ["createBrowserHistory", "options", "createBrowserLocation", "window", "globalHistory", "pathname", "search", "hash", "location", "createLocation", "state", "usr", "key", "createBrowserHref", "to", "createPath", "getUrlBasedHistory", "invariant", "value", "message", "Error", "warning", "cond", "console", "warn", "e", "createKey", "Math", "random", "toString", "substr", "getHistoryState", "index", "idx", "current", "_extends", "parsePath", "_ref", "charAt", "path", "parsedPath", "hashIndex", "indexOf", "searchIndex", "getLocation", "createHref", "validateLocation", "document", "defaultView", "v5Compat", "history", "action", "Action", "Pop", "listener", "getIndex", "replaceState", "handlePop", "nextIndex", "delta", "push", "Push", "historyState", "url", "pushState", "error", "DOMException", "name", "assign", "replace", "Replace", "createURL", "base", "origin", "href", "URL", "listen", "fn", "addEventListener", "PopStateEventType", "removeEventListener", "encodeLocation", "go", "n", "isIndexRoute", "route", "convertRoutesToDataRoutes", "routes", "mapRouteProperties", "parentPath", "manifest", "map", "treePath", "id", "join", "children", "indexRoute", "pathOrLayoutRoute", "undefined", "matchRoutes", "locationArg", "basename", "stripBasename", "branches", "flattenRoutes", "rankRouteBranches", "matches", "i", "length", "decoded", "decodePath", "matchRouteBranch", "convertRouteMatchToUiMatch", "match", "loaderData", "params", "data", "handle", "parentsMeta", "flattenRoute", "relativePath", "meta", "caseSensitive", "childrenIndex", "startsWith", "slice", "joinPaths", "routesMeta", "concat", "score", "computeScore", "forEach", "_route$path", "includes", "exploded", "explodeOptionalSegments", "segments", "split", "first", "rest", "isOptional", "endsWith", "required", "restExploded", "result", "subpath", "sort", "a", "b", "compareIndexes", "initialScore", "some", "isSplat", "splatPenalty", "indexRouteValue", "filter", "s", "reduce", "segment", "paramRe", "test", "dynamicSegmentValue", "emptySegmentValue", "staticSegmentValue", "siblings", "every", "branch", "matchedParams", "matchedPathname", "end", "remainingPathname", "matchPath", "Object", "pathnameBase", "normalizePathname", "generatePath", "originalPath", "prefix", "stringify", "p", "String", "array", "isLastSegment", "star", "keyMatch", "optional", "param", "pattern", "matcher", "compiledParams", "compilePath", "captureGroups", "memo", "paramName", "splatValue", "regexpSource", "_", "RegExp", "v", "decodeURIComponent", "toLowerCase", "startIndex", "nextChar", "resolvePath", "fromPathname", "toPathname", "resolvePathname", "normalizeSearch", "normalizeHash", "relativeSegments", "pop", "getInvalidPathError", "char", "field", "dest", "JSON", "getPathContributingMatches", "getResolveToMatches", "v7_relativeSplatPath", "pathMatches", "resolveTo", "toArg", "routePathnames", "locationPathname", "isPathRelative", "isEmptyPath", "from", "routePathnameIndex", "toSegments", "shift", "hasExplicitTrailingSlash", "hasCurrentTrailingSlash", "isTrackedPromise", "Promise", "_tracked", "unwrapTrackedPromise", "_error", "_data", "isRouteErrorResponse", "status", "statusText", "internal", "createRouter", "init", "routerWindow", "isBrowser", "createElement", "isServer", "detectErrorBoundary", "hasErrorBoundary", "defaultMapRouteProperties", "dataRoutes", "inFlightDataRoutes", "future", "v7_fetcherPersist", "v7_normalizeFormMethod", "v7_partialHydration", "v7_prependBasename", "unlistenHistory", "subscribers", "Set", "savedScrollPositions", "getScrollRestorationKey", "getScrollPosition", "initialScrollRestored", "hydrationData", "initialMatches", "initialErrors", "getInternalRouterError", "getShortCircuitMatches", "initialized", "hasLazyRoutes", "m", "lazy", "hasLoaders", "loader", "errors", "hydrate", "router", "historyAction", "navigation", "IDLE_NAVIGATION", "restoreScrollPosition", "preventScrollReset", "revalidation", "actionData", "fetchers", "Map", "blockers", "pendingAction", "HistoryAction", "pendingPreventScrollReset", "pendingNavigationController", "pendingViewTransitionEnabled", "appliedViewTransitions", "removePageHideEventListener", "isUninterruptedRevalidation", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "fetchControllers", "incrementingLoadId", "pendingNavigationLoadId", "fetchReloadIds", "fetchRedirectIds", "fetchLoadMatches", "activeFetchers", "deletedFetchers", "activeDeferreds", "blockerFunctions", "ignoreNextHistoryUpdate", "initialize", "size", "blockerKey", "shouldBlockNavigation", "currentLocation", "nextLocation", "updateBlocker", "proceed", "reset", "set", "IDLE_BLOCKER", "updateState", "startNavigation", "restoreAppliedTransitions", "_saveAppliedTransitions", "persistAppliedTransitions", "initialHydration", "dispose", "clear", "abort", "deleteFetcher", "deleteBlocker", "subscribe", "add", "delete", "newState", "opts", "completedFetchers", "deletedFetchersKeys", "fetcher", "has", "subscriber", "unstable_viewTransitionOpts", "viewTransitionOpts", "unstable_flushSync", "flushSync", "completeNavigation", "_temp", "_location$state", "_location$state2", "isActionReload", "formMethod", "isMutationMethod", "_isRedirect", "keys", "mergeLoaderData", "k", "priorPaths", "get", "toPaths", "getSavedScrollPosition", "navigate", "normalizedPath", "normalizeTo", "fromRouteId", "relative", "submission", "normalizeNavigateOptions", "userReplace", "formAction", "pendingError", "enableViewTransition", "unstable_viewTransition", "revalidate", "interruptActiveLoads", "startUninterruptedRevalidation", "overrideNavigation", "saveScrollPosition", "routesToUse", "loadingNavigation", "notFoundMatches", "cancelActiveDeferreds", "isHashChangeOnly", "AbortController", "request", "createClientSideRequest", "signal", "pendingActionData", "findNearestBoundary", "actionOutput", "handleAction", "shortCircuited", "pendingActionError", "getLoadingNavigation", "Request", "handleLoaders", "fetcherSubmission", "getSubmittingNavigation", "actionMatch", "getTargetMatch", "type", "ResultType", "method", "routeId", "callLoaderOrAction", "aborted", "isRedirectResult", "startRedirectNavigation", "isErrorResult", "boundaryMatch", "isDeferredResult", "activeSubmission", "getSubmissionFromNavigation", "matchesToLoad", "revalidatingFetchers", "getMatchesToLoad", "updatedFetchers", "markFetchRedirectsDone", "rf", "revalidatingFetcher", "getLoadingFetcher", "abortFetcher", "controller", "abortPendingFetchRevalidations", "f", "results", "loaderResults", "fetcherResults", "callLoadersAndMaybeResolveData", "redirect", "findRedirect", "fetcherKey", "processLoaderData", "deferredData", "done", "didAbortFetchLoads", "abortStaleFetchLoads", "shouldUpdateFetchers", "fetch", "setFetcherError", "handleFetcherAction", "handleFetcherLoader", "requestMatches", "existingFetcher", "updateFetcherState", "getSubmittingFetcher", "abortController", "fetchRequest", "originatingLoadId", "actionResult", "getDoneFetcher", "revalidationRequest", "loadId", "loadFetcher", "staleKey", "r", "doneFetcher", "resolveDeferredData", "_temp2", "redirectLocation", "isDocumentReload", "reloadDocument", "ABSOLUTE_URL_REGEX", "redirectHistoryAction", "formEncType", "redirectPreserveMethodStatusCodes", "currentMatches", "fetchersToLoad", "all", "resolveDeferredResults", "getFetcher", "IDLE_FETCHER", "deleteFetcherAndUpdateState", "count", "markFetchersDone", "doneKeys", "landedId", "yeetedKeys", "getBlocker", "blocker", "newBlocker", "_ref2", "entries", "Array", "blockerFunction", "predicate", "cancelledRouteIds", "dfd", "cancel", "enableScrollRestoration", "positions", "getPosition", "getKey", "y", "getScrollKey", "_internalSetRoutes", "newRoutes", "_internalFetchControllers", "_internalActiveDeferreds", "createStaticHandler", "v7_throwAbortReason", "query", "_temp3", "requestContext", "isValidMethod", "methodNotAllowedMatches", "statusCode", "loaderHeaders", "actionHeaders", "queryImpl", "isResponse", "queryRoute", "_temp4", "find", "values", "_result$activeDeferre", "UNSAFE_DEFERRED_SYMBOL", "routeMatch", "submit", "loadRouteData", "isQueryRouteResponse", "response", "isRedirectResponse", "isRouteRequest", "isStaticRequest", "throwStaticHandlerAbortedError", "Response", "headers", "Location", "context", "loaderRequest", "getLoaderMatchesUntilBoundary", "acc", "processRouteLoaderData", "executedLoaders", "fromEntries", "getStaticContextFromError", "newContext", "_deepestRenderedBoundaryId", "reason", "isSubmissionNavigation", "formData", "body", "prependBasename", "contextualMatches", "activeRouteMatch", "hasNakedIndexQuery", "normalizeFormMethod", "isFetcher", "getInvalidBodyError", "rawFormMethod", "toUpperCase", "stripHashFromPath", "text", "FormData", "URLSearchParams", "_ref3", "json", "parse", "searchParams", "convertFormDataToSearchParams", "convertSearchParamsToFormData", "append", "boundaryId", "boundaryMatches", "findIndex", "isInitialLoad", "currentUrl", "nextUrl", "navigationMatches", "isNewLoader", "currentRouteMatch", "nextRouteMatch", "shouldRevalidateLoader", "currentParams", "nextParams", "defaultShouldRevalidate", "isNewRouteInstance", "fetcherMatches", "fetcherMatch", "shouldRevalidate", "currentLoaderData", "currentMatch", "isNew", "isMissingData", "currentPath", "loaderMatch", "arg", "routeChoice", "loadLazyRouteModule", "lazyRoute", "routeToUpdate", "routeUpdates", "lazyRouteProperty", "staticRouteValue", "isPropertyStaticallyDefined", "immutableRouteKeys", "resultType", "onReject", "runHandler", "handler", "reject", "abortPromise", "race", "handlerError", "catch", "redirectStatusCodes", "protocol", "isSameBasename", "queryRouteResponse", "contentType", "ErrorResponseImpl", "isDeferredData", "_result$init", "_result$init2", "deferred", "Headers", "foundError", "newLoaderData", "mergedLoaderData", "hasOwnProperty", "eligibleMatches", "reverse", "_temp5", "errorMessage", "resolveData", "obj", "validRequestMethods", "validMutationMethods", "signals", "isRevalidatingLoader", "then", "unwrap", "unwrappedData", "getAll", "_window", "transitions", "sessionPositions", "sessionStorage", "getItem", "TRANSITIONS_STORAGE_KEY", "isArray", "setItem", "AbortedDeferredError", "DeferredData", "defer", "redirectDocument", "validMutationMethodsArr", "validRequestMethodsArr", "paths", "responseInit", "constructor", "pendingKeysSet", "deferredKeys", "onAbort", "unlistenAbortSignal", "trackPromise", "promise", "onSettle", "defineProperty", "undefinedError", "emit", "settledKey", "resolve", "pendingKeys", "Boolean", "Symbol", "ServerMode", "isDeferredData", "isResponse", "redirectStatusCodes", "isRedirectResponse", "isTrackedPromise", "json", "defer", "redirect", "redirectDocument", "parse", "serialize", "decode", "token", "value", "parse", "cookies", "splitCookiesString", "headers", "invariant", "isResponse", "json", "isDeferredData", "redirect", "isRedirectResponse", "isResponse", "error", "invariant", "init_errors", "init_errors", "defer", "json", "redirect", "redirectDocument", "init_errors"]
}
